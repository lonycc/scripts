user              nginx nginx;
worker_processes  8;  #工作进程，大于CPU核数

error_log  /var/log/nginx/error.log;
pid        /var/run/nginx.pid;  #pid保存位置

events {
    use epoll;  #使用epoll的I/O模型，2.6内核以后系统
    worker_connections  1024;  #单个后台worker process进程的最大并发链接数
}

#设定http服务器，利用它的反向代理功能提供负载均衡
http {
    include       mime.types; 
    default_type  application/octet-stream;
    
    # 需要需要反向代理
    # include proxy.conf;

    charset       UTF-8;
    server_names_hash_bucket_size  128;
    client_header_buffer_size   4k;
    large_client_header_buffers  8  128k;
    client_max_body_size  300m;

    sendfile       on;
    tcp_nopush     on;
    tcp_nodelay    on;
    keepalive_timeout  60;   #保持连接超时时间
    server_tokens off;  #不显示nginx版本号    
    
    
    # php fastcgi才开启
    # ----------------------------------
    fastcgi_connect_timeout 300;
    fastcgi_send_timeout 300;
    fastcgi_read_timeout 300;
    fastcgi_buffer_size 64k;
    fastcgi_buffers 4 64k;
    fastcgi_busy_buffers_size 128k;
    fastcgi_temp_file_write_size 128k;
    # ----------------------------------
    
    
    
    # 开启gzip压缩
    # ---------------------------------
    gzip         on;  
    gzip_vary    on;
    gzip_comp_level   6;
    gzip_buffers    16 8k;
    gzip_min_length 1000;
    gzip_proxied    any;
    gzip_disable    "msie6";
    gzip_http_version  1.1;
    gzip_types   text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript application/javascript image/svg+xml;
    # --------------------------------

    client_header_timeout 3m;
    client_body_timeout 3m;
    send_timeout 3m;

    #设定负载均衡的服务器列表
    upstream mysvr {
        #weigth参数表示权值，权值越高被分配到的几率越大
        #本机上的Squid开启3128端口
        server 192.168.8.1:3128 weight=5;
        server 192.168.8.2:80  weight=1;
        server 192.168.8.3:80  weight=6;
    }
    
	# 禁止ip直接访问80端口
    server {
	listen 80 default_server;
	return 501;
    }
    # 禁止ip直接访问443端口
    server {
	listen 443 ssl default_server;
	return 501;
    }
    # 禁止空主机名
    server {
	listen 80;
	server_name _;
    }
    
    server {
        listen       80;
        server_name  domain.com;
        root  /var/web;
        charset utf-8;
        index index.php index.html index.htm;
        try_files  $uri  /index.php$uri;

        error_page   500 502 503 504 /50x.html;  
        location = /50x.html {
            root   /root;
        }
        
        #如果请求既不是一个文件，也不是一个目录，则执行一下重写规则
        if ( ! -e $request_filename )
        {
            #地址作为将参数rewrite到index.php上。
            rewrite ^/(.*)$ /index.php/$1 last;
            #rewrite ^(.*)$ /index.php?s=$1 last;
            break;
            #若是子目录则使用下面这句，将subdir改成目录名称即可。
            #rewrite ^/subdir/(.*)$ /subdir/index.php/$1;
        }


        #去掉$是为了不匹配行末，即可以匹配.php/，以实现pathinfo
        location ~ \.php {
            #定义变量 $path_info ，用于存放pathinfo信息
            set $path_info "";
            #定义变量 $real_script_name，用于存放真实地址
            set $real_script_name $fastcgi_script_name;
            
            #如果地址与引号内的正则表达式匹配
            if ($fastcgi_script_name ~ "^(.+?\.php)(/.+)$")
            {
                #将文件地址赋值给变量 $real_script_name
                set $real_script_name $1;
                #将文件地址后的参数赋值给变量 $path_info
                set $path_info $2;
            }
            fastcgi_pass  unix:/tmp/php-cgi.sock;
            fastcgi_index index.php;
            fastcgi_split_path_info ^(.+\.php)(.*)$;
            #fastcgi_param PATH_INFO $fastcgi_path_info;
            fastcgi_param  PATH_TRANSLATED  $document_root$fastcgi_path_info;
            fastcgi_param SCRIPT_FILENAME $document_root$real_script_name;
            fastcgi_param SCRIPT_NAME $real_script_name;
            fastcgi_param PATH_INFO $path_info;
            include fastcgi_params;
        }
        
        if (-d $request_filename)
        {
            rewrite ^/(.*)([^/])$ http://$host/$1$2/ permanent;
        }
        
        location ~ (\.jsp)|(\.do)$
        {
            index index.jsp;
            proxy_pass http://192.168.1.1:8080;
        }
	  
        location ~ .*\.(gif|jpg|jpeg|png|bmp|swf|mp3|swf)$
        {
            expires 30d;
        }
	  
        location ~ .*\.(js|css)?$
        {
            expires 1h;
        }     
          
        location ~ \.php
        {
            fastcgi_pass  127.0.0.1:9000;
            fastcgi_index index.php;
            fastcgi_split_path_info  ^(.+\.php)(/.*)$;
            fastcgi_param  PATH_INFO $fastcgi_path_info;
            fastcgi_param  SCRIPT_FILENAME /var/web$fastcgi_script_name;   
            include fastcgi_params;
        }
        
        location ~ \.jsp$
        {
            proxy_redirect off;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            client_max_body_size 10m;    #允许客户端请求的最大单文件字节数
            client_body_buffer_size 128k;  #缓冲区代理缓冲用户端请求的最大字节数，
            proxy_connect_timeout 90;  #nginx跟后端服务器连接超时时间(代理连接超时)
            proxy_send_timeout 90; #后端服务器数据回传时间(代理发送超时)
            proxy_read_timeout 90; #连接成功后，后端服务器响应时间(代理接收超时)
            proxy_buffer_size 4k;  #设置代理服务器（nginx）保存用户头信息的缓冲区大小
            proxy_buffers 4 32k;   #proxy_buffers缓冲区，网页平均在32k以下的话，这样设置
            proxy_busy_buffers_size 64k;    #高负荷下缓冲大小（proxy_buffers*2）
            proxy_temp_file_write_size 64k; #设定缓存文件夹大小，大于这个值，将从upstream服务器传        
        }
    }
    include server.conf;
}
